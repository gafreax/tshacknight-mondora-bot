{"version":3,"sources":["../src/bot.js"],"names":["azure","require","connector","appId","appPassword","defaultAction","session","args","next","send","startBot","console","log","bot","azureTableClient","AzureTableClient","tableStorage","AzureBotStorage","gzipData","set","defaultLocale","dialog","endConversation","triggerAction","matches","method","url","headers","then","response","data","collection","forEach","element","name","txt","message","text","phrase","company","slice","indexOf","length","toLowerCase","companies","companyFound","find","userData","worked","date","Date","join","listen"],"mappings":"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","file":"bot.js","sourcesContent":["import {\n    UniversalBot,\n    MemoryBotStorage,\n    LuisRecognizer,\n    IntentDialog,\n    ChatConnector,\n    AzureTableClient,\n    Session,\n    RegExpRecognizer\n} from 'botbuilder';\nimport {\n    LUIS_RECOGNIZER_URLS,\n    LUIS_INTENTS_THRESHOLD,\n    MICROSOFT_APP_ID,\n    MICROSOFT_APP_PASSWORD,\n    AZURE_STORAGE_KEY,\n    AZURE_TABLE_NAME,\n    AZURE_STORAGE_NAME,\n    DEFAULT_LOCALE\n} from './config';\nimport axios from 'axios';\nimport {\n    version\n} from '../package.json';\n\nvar azure = require('botbuilder-azure');\nimport {\n    load\n} from 'dotenv';\n\nconst connector = new ChatConnector({\n    appId: MICROSOFT_APP_ID,\n    appPassword: MICROSOFT_APP_PASSWORD\n});\nconst defaultAction = (session, args, next) => {\n    session.send('Come posso esserti utile?');\n}\nvar startBot = () => {\n    console.log('Starting bot...');\n    var bot = new UniversalBot(connector, defaultAction);\n    var azureTableClient = new azure.AzureTableClient(AZURE_TABLE_NAME, AZURE_STORAGE_NAME, AZURE_STORAGE_KEY);\n    var tableStorage = new azure.AzureBotStorage({\n        gzipData: false\n    }, azureTableClient);\n    bot.set('storage', tableStorage);\n    bot.set('persistConversationData', false);\n    bot.set('persistUserData', true);\n\n    bot.set('localizerSettings', {\n        defaultLocale: DEFAULT_LOCALE\n    });\n    bot.connector('*', connector);\n\n    bot.dialog('TestlDialog', (session) => {\n        session.endConversation('Ok, Test are OK');\n    }).triggerAction({\n        matches: /test/\n    });\n    bot.dialog('VersionDialog', (session) => {\n        session.endConversation('Version ' + version);\n    }).triggerAction({\n        matches: /version/\n    });\n    bot.dialog('Customers', function (session) {\n        session.send('Lista clienti');\n        axios({\n                method: 'get',\n                url: 'https://rest.reviso.com/customers',\n                headers: {\n                    \"X-AppSecretToken\": \"SxQv1oTvGSstuYIEKpgBDKbzMccUMVDBEhIeRUriY3M1\",\n                    \"X-AgreementGrantToken\": \"VEvSFx42bWzeBSRP8PQ92xBvXEhbaWO79k9XsGlMelg1\"\n                },\n            })\n            .then((response) => {\n                response.data.collection.forEach(element => session.send(element.name));\n                session.endConversation(\"---\");\n            });\n    }).triggerAction({\n        matches: /clienti/\n    });\n    bot.dialog('DailyScrum',\n        (session) => {\n            const txt = session.message.text;\n            const phrase = 'oggi ho lavorato per';\n            var company = txt.slice(txt.indexOf(phrase) + phrase.length + 1).toLowerCase();\n            axios({\n                    method: 'get',\n                    url: 'https://rest.reviso.com/customers',\n                    headers: {\n                        \"X-AppSecretToken\": \"SxQv1oTvGSstuYIEKpgBDKbzMccUMVDBEhIeRUriY3M1\",\n                        \"X-AgreementGrantToken\": \"VEvSFx42bWzeBSRP8PQ92xBvXEhbaWO79k9XsGlMelg1\"\n                    },\n                })\n                .then((response) => {\n                    console.log('company ' + company);\n                    const companies = response.data.collection;\n                    const companyFound = companies.find(element => element.name.toLowerCase().indexOf(company) >= 0);\n                    if (companyFound) {\n                        session.send('Consuntivato il lavoro');\n                        session.userData.worked = {};\n                        session.userData.worked.date = new Date();\n                        session.userData.worked.company = companyFound;\n                        console.log(session.userData);\n                    } else {\n                        session.send('Nessuna azienda corrispondente, selezionane una fra le seguenti');\n                        session.send(companies.join('  \\n '));\n                    }\n                });\n\n        }\n    ).triggerAction({\n        matches: /oggi\\ ho\\ lavorato\\ per/\n    });\n    console.log('COPMPLETE ');\n    return connector.listen();\n};\n\nexport default startBot;\n"]}