{"version":3,"sources":["../src/bot.js"],"names":["azure","require","connector","appId","appPassword","defaultAction","session","args","next","send","startBot","console","log","bot","azureTableClient","AzureTableClient","tableStorage","AzureBotStorage","gzipData","set","defaultLocale","dialog","endConversation","triggerAction","matches","text","results","endDialog","response","txt","message","phrase","company","slice","indexOf","length","toLowerCase","method","url","headers","then","companies","data","collection","companyFound","find","element","name","userData","worked","date","Date","map","cmp","join","argument","listen"],"mappings":"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","file":"bot.js","sourcesContent":["import {\n    UniversalBot,\n    MemoryBotStorage,\n    LuisRecognizer,\n    IntentDialog,\n    ChatConnector,\n    AzureTableClient,\n    Session,\n    Prompts,\n    RegExpRecognizer\n} from 'botbuilder';\nimport {\n    LUIS_RECOGNIZER_URLS,\n    LUIS_INTENTS_THRESHOLD,\n    MICROSOFT_APP_ID,\n    MICROSOFT_APP_PASSWORD,\n    AZURE_STORAGE_KEY,\n    AZURE_TABLE_NAME,\n    AZURE_STORAGE_NAME,\n    DEFAULT_LOCALE\n} from './config';\nimport axios from 'axios';\nimport {\n    version\n} from '../package.json';\n\nvar azure = require('botbuilder-azure');\nimport {\n    load\n} from 'dotenv';\n\nconst connector = new ChatConnector({\n    appId: MICROSOFT_APP_ID,\n    appPassword: MICROSOFT_APP_PASSWORD\n});\nconst defaultAction = (session, args, next) => {\n    session.send('Come posso esserti utile?');\n}\nvar startBot = () => {\n    console.log('Starting bot...');\n    var bot = new UniversalBot(connector, defaultAction);\n    var azureTableClient = new azure.AzureTableClient(AZURE_TABLE_NAME, AZURE_STORAGE_NAME, AZURE_STORAGE_KEY);\n    var tableStorage = new azure.AzureBotStorage({\n        gzipData: false\n    }, azureTableClient);\n    bot.set('storage', tableStorage);\n    bot.set('persistConversationData', false);\n    bot.set('persistUserData', true);\n    bot.set('localizerSettings', {\n        defaultLocale: DEFAULT_LOCALE\n    });\n    bot.connector('*', connector);\n\n    bot.dialog('TestlDialog', (session) => {\n        session.endConversation('Ok, Test are OK');\n    }).triggerAction({\n        matches: /test/\n    });\n    bot.dialog('VersionDialog', (session) => {\n        session.endConversation('Version ' + version);\n    }).triggerAction({\n        matches: /version/\n    });\n    bot.dialog('FirstStart', [\n        (session) => {\n            Prompts.text(session, 'Qual\\'è il tuo costo giornaliero?');\n        },\n        (session, results) => {\n            session.endDialog(`Memorizzato il costo di ${results.response} EUR!`);\n        }\n    ]).triggerAction({\n        matches: /buongiorno/\n    });\n    bot.dialog('DailyScrumW', [\n        session => {\n            const txt = session.message.text;\n            const phrase = 'oggi ho lavorato per';\n            var company = txt.slice(txt.indexOf(phrase) + phrase.length + 1).toLowerCase();\n            axios({\n                    method: 'get',\n                    url: 'https://rest.reviso.com/customers',\n                    headers: {\n                        \"X-AppSecretToken\": \"SxQv1oTvGSstuYIEKpgBDKbzMccUMVDBEhIeRUriY3M1 \",\n                        \"X-AgreementGrantToken\": \"VEvSFx42bWzeBSRP8PQ92xBvXEhbaWO79k9XsGlMelg1 \"\n                    },\n                })\n                .then(async (response) => {\n                    console.log('company ' + company);\n                    const companies = response.data.collection;\n                    const companyFound = companies.find(element => element.name.toLowerCase().indexOf(company) >= 0);\n                    if (companyFound) {\n                        session.send('Consuntivato il lavoro per ' + companyFound.name);\n                        session.userData.worked = {};\n                        session.userData.worked.date = new Date();\n                        session.userData.worked.company = companyFound;\n                        Prompts.text(session, 'Qual\\'è la tariffa per questo cliente?');\n                    } else {\n                        session.send('Nessuna azienda corrispondente, selezionane una fra le seguenti');\n                        session.send(companies.map(cmp => cmp.name).join('  \\n '));\n                    }\n                });\n\n        },\n        (session, results) => {\n            session.endDialog(`Tariffa di ${results.response} EUR memorizzata!`);\n        }\n    ]).triggerAction({\n        matches: /oggi\\ ho\\ lavorato\\ per/\n    });\n    bot.dialog('DailyScrumS',\n        session => {\n            const txt = session.message.text;\n            const phrase = 'oggi ho fatto formazione su';\n            var argument = txt.slice(txt.indexOf(phrase) + phrase.length + 1).toLowerCase();\n            session.send('Consuntivata la formazione su ' + argument);\n        }\n    ).triggerAction({\n        matches: /oggi\\ ho\\ fatto\\ formazione\\ su/\n    });\n    return connector.listen();\n};\n\nexport default startBot;\n"]}