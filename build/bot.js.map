{"version":3,"sources":["../src/bot.js"],"names":["azure","require","connector","appId","appPassword","defaultAction","session","args","next","console","log","rnd","Math","floor","random","phrase","length","endDialog","startBot","bot","azureTableClient","AzureTableClient","tableStorage","AzureBotStorage","gzipData","set","defaultLocale","dialog","endConversation","triggerAction","matches","send","axios","method","url","responseType","headers","then","response","data","pipe","fs","createWriteStream","listen"],"mappings":";;;;;;AAAA;;AAUA;;AAWA;;AAKA;;AADA,IAAIA,QAAQC,QAAQ,kBAAR,CAAZ;;;AAKA,IAAMC,YAAY,8BAAkB;AAChCC,mCADgC;AAEhCC;AAFgC,CAAlB,CAAlB;AAIA,IAAMC,gBAAgB,SAAhBA,aAAgB,CAACC,OAAD,EAAUC,IAAV,EAAgBC,IAAhB,EAAyB;AAC3CC,YAAQC,GAAR,CAAY,gBAAZ;AACA,QAAIC,MAAMC,KAAKC,KAAL,CAAWD,KAAKE,MAAL,KAAgBC,OAAOC,MAAvB,GAAgC,CAA3C,CAAV;AACAV,YAAQW,SAAR,CAAkBF,OAAOJ,GAAP,CAAlB;AACH,CAJD;AAKA,IAAIO,WAAW,SAAXA,QAAW,GAAM;AACjBT,YAAQC,GAAR,CAAY,iBAAZ;AACA,QAAIS,MAAM,6BAAiBjB,SAAjB,EAA4BG,aAA5B,CAAV;AACA,QAAIe,mBAAmB,IAAIpB,MAAMqB,gBAAV,iFAAvB;AACA,QAAIC,eAAe,IAAItB,MAAMuB,eAAV,CAA0B;AACzCC,kBAAU;AAD+B,KAA1B,EAEhBJ,gBAFgB,CAAnB;AAGAD,QAAIM,GAAJ,CAAQ,SAAR,EAAmBH,YAAnB;AACAH,QAAIM,GAAJ,CAAQ,yBAAR,EAAmC,KAAnC;AACAN,QAAIM,GAAJ,CAAQ,iBAAR,EAA2B,IAA3B;;AAEAN,QAAIM,GAAJ,CAAQ,mBAAR,EAA6B;AACzBC;AADyB,KAA7B;AAGAP,QAAIjB,SAAJ,CAAc,GAAd,EAAmBA,SAAnB;AACAiB,QAAIQ,MAAJ,CAAW,aAAX,EAA0B,UAACrB,OAAD,EAAa;AACnCA,gBAAQsB,eAAR,CAAwB,iBAAxB;AACH,KAFD,EAEGC,aAFH,CAEiB;AACbC,iBAAS;AADI,KAFjB;;AAMAX,QAAIQ,MAAJ,CAAW,WAAX,EAAwB,UAAUrB,OAAV,EAAmB;AACvCA,gBAAQyB,IAAR,CAAa,eAAb;AACAC,cAAM;AACEC,oBAAQ,KADV;AAEEC,iBAAK,mCAFP,EAE4C;AAC1CC,0BAAc,QAHhB;AAIEC,qBAAS;AACL,oCAAoB,8CADf;AAEL,yCAAyB,8CAFpB;AAGL,gCAAgB,kBAHX;AAIL,iCAAiB;AAJZ;AAJX,SAAN,EAWKC,IAXL,CAWU,UAACC,QAAD,EAAc;AAChBA,qBAASC,IAAT,CAAcC,IAAd,CAAmBC,GAAGC,iBAAH,CAAqB,kBAArB,CAAnB;AACH,SAbL;AAcH,KAhBD,EAgBGb,aAhBH,CAgBiB;AACbC,iBAAS;AADI,KAhBjB;;AAoBArB,YAAQC,GAAR,CAAY,YAAZ;AACA,WAAOR,UAAUyC,MAAV,EAAP;AACH,CA3CD;;kBA6CezB,Q","file":"bot.js","sourcesContent":["import {\n    UniversalBot,\n    MemoryBotStorage,\n    LuisRecognizer,\n    IntentDialog,\n    ChatConnector,\n    AzureTableClient,\n    Session,\n    RegExpRecognizer\n} from 'botbuilder';\nimport {\n    LUIS_RECOGNIZER_URLS,\n    LUIS_INTENTS_THRESHOLD,\n    MICROSOFT_APP_ID,\n    MICROSOFT_APP_PASSWORD,\n    AZURE_STORAGE_KEY,\n    AZURE_TABLE_NAME,\n    AZURE_STORAGE_NAME,\n    DEFAULT_LOCALE\n} from './config';\n\nimport {\n    version\n} from '../package.json';\n\nvar azure = require('botbuilder-azure');\nimport {\n    load\n} from 'dotenv';\n\nconst connector = new ChatConnector({\n    appId: MICROSOFT_APP_ID,\n    appPassword: MICROSOFT_APP_PASSWORD\n});\nconst defaultAction = (session, args, next) => {\n    console.log('default action');\n    var rnd = Math.floor(Math.random() * phrase.length + 1);\n    session.endDialog(phrase[rnd]);\n}\nvar startBot = () => {\n    console.log('Starting bot...');\n    var bot = new UniversalBot(connector, defaultAction);\n    var azureTableClient = new azure.AzureTableClient(AZURE_TABLE_NAME, AZURE_STORAGE_NAME, AZURE_STORAGE_KEY);\n    var tableStorage = new azure.AzureBotStorage({\n        gzipData: false\n    }, azureTableClient);\n    bot.set('storage', tableStorage);\n    bot.set('persistConversationData', false);\n    bot.set('persistUserData', true);\n\n    bot.set('localizerSettings', {\n        defaultLocale: DEFAULT_LOCALE\n    });\n    bot.connector('*', connector);\n    bot.dialog('TestlDialog', (session) => {\n        session.endConversation('Ok, Test are OK');\n    }).triggerAction({\n        matches: /test/\n    });\n\n    bot.dialog('Customers', function (session) {\n        session.send('Lista clienti');\n        axios({\n                method: 'get',\n                url: 'https://rest.reviso.com/customers', // TODO put it in conf\n                responseType: 'stream',\n                headers: {\n                    \"X-AppSecretToken\": \"SxQv1oTvGSstuYIEKpgBDKbzMccUMVDBEhIeRUriY3M1\",\n                    \"X-AgreementGrantToken\": \"VEvSFx42bWzeBSRP8PQ92xBvXEhbaWO79k9XsGlMelg1\",\n                    \"Content-Type\": \"application/json\",\n                    \"Cache-Control\": \"no-cache\",\n                },\n            })\n            .then((response) => {\n                response.data.pipe(fs.createWriteStream('ada_lovelace.jpg'))\n            });\n    }).triggerAction({\n        matches: /clienti/\n    });\n\n    console.log('COPMPLETE ');\n    return connector.listen();\n};\n\nexport default startBot;\n"]}